import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * User: Maciej Poleski
 * Date: 03.05.13
 * Time: 18:44
 */
public class DatabaseUtils {
    private final static String connectionString = "jdbc:derby:database";
    private static Connection connection;

    public static Connection getConnection() throws SQLException {
        if (connection != null)
            return connection;
        return connection = DriverManager.getConnection(connectionString);
    }

    public static int addNewUser(String login, String password) {
        try {
            Connection connection = getConnection();
            Statement statement = connection.createStatement();
            int result = statement.executeUpdate("INSERT INTO APP.USERS (LOGIN, PASSWORD) VALUES ('" + login + "', '" + password + "')");
            return result;
        } catch (SQLException e) {
            e.printStackTrace();
            return 0;
        }
    }

    public static boolean tryLogin(String login, String password) {
        try {
            Connection connection = getConnection();
            ResultSet result = connection.createStatement().executeQuery("SELECT * from app.users where login='" + login + "' and password='" + password + "'");
            return result.next();
        } catch (SQLException e) {
            return false;
        }
    }

    public static List<Item> getAllAvailableItems() {
        try {
            Connection connection = getConnection();
            ResultSet rs = connection.createStatement().executeQuery("SELECT * FROM app.items");
            List<Item> result = new ArrayList<>();
            while (rs.next()) {
                result.add(new Item(rs.getInt(1), rs.getString(2), rs.getInt(3), rs.getInt(4)));
            }
            return result;
        } catch (SQLException e) {
            return new ArrayList<>();
        }
    }

    public static void prepareDatabase() {
        try {
            connection = DriverManager.getConnection(connectionString + ";create=true");
            Statement statement = connection.createStatement();
            statement.execute("CREATE TABLE users (id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1001, INCREMENT BY 1), login VARCHAR(256), password VARCHAR (256))");
            statement.executeUpdate("INSERT INTO APP.USERS (LOGIN, PASSWORD) VALUES ('login1', 'password1')");
            statement.executeUpdate("INSERT INTO APP.USERS (LOGIN, PASSWORD) VALUES ('login2', 'password2')");
            statement.execute("CREATE TABLE items (id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1001, INCREMENT BY 1), name VARCHAR(256), price INT, count INT)");
            statement.executeUpdate("INSERT INTO app.items (name, price, count) VALUES ('Uran',10,1000)");
            statement.executeUpdate("INSERT INTO app.items (name, price, count) VALUES ('Pluton',5,2000)");
            statement.executeUpdate("INSERT INTO app.items (name, price, count) VALUES ('Gadolin',20,1000)");
            statement.executeUpdate("INSERT INTO app.items (name, price, count) VALUES ('Molibden',50,500)");
            statement.executeUpdate("INSERT INTO app.items (name, price, count) VALUES ('Technet',50,20)");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static boolean tryBuy(List<Item> resultItems) {
        List<Item> allItems = getAllAvailableItems();
        for (Item item : resultItems) {
            boolean ok = false;
            for (Item inDatabaseItem : allItems) {
                if (inDatabaseItem.getId() == item.getId()) {
                    if (inDatabaseItem.getCount() < item.getCount())
                        return false;
                    ok = true;
                    break;
                }
            }
            if (!ok)
                return false;
        }
        removeItemsFromDatabase(resultItems);
        return true;
    }

    private static void removeItemsFromDatabase(List<Item> resultItems) {
        for (Item item : resultItems) {
            try {
                Connection connection = getConnection();
                Statement statement = connection.createStatement();
                statement.executeUpdate("update app.items set count=count-" + item.getCount() + " where id=" + item.getId() + "");
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static class Item {
        int id;
        String name;
        int price;
        int count;

        public Item(int id, String name, int price, int count) {
            this.id = id;
            this.name = name;
            this.price = price;
            this.count = count;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        @Override
        public String toString() {
            final StringBuilder sb = new StringBuilder("Item{");
            sb.append("id=").append(id);
            sb.append(", name='").append(name).append('\'');
            sb.append(", price=").append(price);
            sb.append(", count=").append(count);
            sb.append('}');
            return sb.toString();
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getCount() {

            return count;
        }

        public void setCount(int count) {
            this.count = count;
        }
    }

    static {
        try {
            /**
             * Ugly but effective
             * @see http://stackoverflow.com/questions/3816015/sqlexception-no-suitable-driver-found-for-jdbcderby-localhost1527
             */
            DriverManager.registerDriver(new org.apache.derby.jdbc.EmbeddedDriver());
            Class.forName("org.apache.derby.jdbc.ClientDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
